# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
# `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
# 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

input DeletePropertyInput {
  propertyId: ID!
  clientMutationId: String
}

type DeletePropertyPayload {
  deletedPropertyId: ID
  clientMutationId: String
}

type Mutation {
  # Upsert a property
  upsertProperty(input: UpsertPropertyInput!): UpsertPropertyPayload
  deleteProperty(input: DeletePropertyInput!): DeletePropertyPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Property implements Node {
  # The ID of an object
  id: ID!
  numberOfRooms: Float
  livingSurface: Float
  landSurface: Float
  numberOfParkings: Int
  createdAt: DateTime
  updatedAt: DateTime
}

# A connection to a list of items.
type PropertyConnectionConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PropertyConnectionEdge]
  totalCount: Int!
}

# An edge in a connection.
type PropertyConnectionEdge {
  # The item at the end of the edge
  node: Property!

  # A cursor for use in pagination
  cursor: String!
}

input PropertyFilters {
  livingSurface_lte: Int
  livingSurface_gte: Int
}

input PropertyInput {
  id: ID
  numberOfRooms: Float
  livingSurface: Float
  landSurface: Float
  numberOfParkings: Int
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node

  # Fetches objects given their IDs
  nodes(
    # The IDs of objects
    ids: [ID!]!
  ): [Node]!
  properties(after: String, first: Int, sortBy: String, sortDirection: String, filters: PropertyFilters): PropertyConnectionConnection
}

input UpsertPropertyInput {
  property: PropertyInput!
  clientMutationId: String
}

type UpsertPropertyPayload {
  property: Property
  clientMutationId: String
}
